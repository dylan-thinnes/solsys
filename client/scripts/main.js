//The init function is used for initialization
var init = function(){
    systemExists = false;
    timer = new Timer();
    timer.start();
    scene = new THREE.Scene();
    camera = new THREE.PerspectiveCamera(30, window.innerWidth / window.innerHeight, 0.1, 10000);
    renderer = new THREE.WebGLRenderer();
    renderer.setSize(window.innerWidth, window.innerHeight);
    document.getElementById("middlelay").appendChild(renderer.domElement);
    window.addEventListener("resize", resizeCanvas);
    controls = new THREE.OrbitControls(camera, renderer.domElement);
    random = xor4096("meow");
    sunMaterials = [];
    planetMaterials = [];
    ringMaterials = [];
    rootGroup = new THREE.Group();
    scene.add(rootGroup);
    solSys = {};

    orbitPathGeometry = new THREE.Geometry();
    var orbitSegments = 256;
    for(var i = 0; i < orbitSegments; i++){
        orbitPathGeometry.vertices.push(new THREE.Vector3(Math.cos(i * (2 * Math.PI / orbitSegments)), Math.sin(i * (2 * Math.PI / orbitSegments)), 0));
    }
    orbitPathMaterial = new THREE.LineBasicMaterial({color: 0xffffff, linewidth: 3}); //linewidth only works on mac/linux
    orbitPathMaterial.transparent = true;
    orbitPathMaterial.opacity = 0.4;

    genStars();

    var start = Date.now();
    genMaterials();
    console.log(`Material generation finished and took ${(Date.now() - start) / 1000} seconds`);
}

var genMaterials = function(){
    var sunJSVGs = [planet1, planet2, planet3, planet4]; //Add sun JSVGs
    var planetJSVGs = [planet1, planet2, planet3, planet4];
    var ringJSVGs = [ring1a, ring1b];
    var textureLoader = new THREE.TextureLoader();
    for(var i = 0; i < sunJSVGs.length; i++){
        let material = new THREE.SpriteMaterial({map: textureLoader.load(sunJSVGs[i]())});
        material.depthTest = false;
        sunMaterials.push(material);
    }
    for(var i = 0; i < planetJSVGs.length; i++){
        let material = new THREE.SpriteMaterial({map: textureLoader.load(planetJSVGs[i]())});
        material.depthTest = false;
        planetMaterials.push(material);
    }
    for(var i = 0; i < ringJSVGs.length; i++){
        let material = new THREE.SpriteMaterial({map: textureLoader.load(ringJSVGs[i]())});
        material.depthTest = false;
        ringMaterials.push(material);
    }
}

//The genStars function is used to randomly generate stars
var genStars = function(){
    var starsColours = [0x774444, 0x447744, 0x444477, 0x777744, 0x774477, 0x447777];
    var starsGeometries = [];
    var starsMaterials = [];
    for (var ii = 0; ii < starsColours.length; ii++) {
        starsGeometries[ii] = new THREE.Geometry();
        starsMaterials[ii] = new THREE.PointsMaterial({color: starsColours[ii], size: 2, sizeAttenuation: false});
    }
    for (var ii = 0; ii < 2000; ii++) {
        var star = new THREE.Vector3();
        star.x = THREE.Math.randFloatSpread(10000);
        star.y = THREE.Math.randFloatSpread(10000);
        star.z = THREE.Math.randFloatSpread(10000);
        starsGeometries[ii % starsColours.length].vertices.push(star);
    }
    var starsFields = [];
    for (var ii = 0; ii < starsColours.length; ii++) {
        starsFields[ii] = new THREE.Points(starsGeometries[ii], starsMaterials[ii]);
        scene.add(starsFields[ii]);
    }
}

//The genPlanets function is used to generate the planets of the solar system
var genPlanets = function(profile){
    systemExists = false;
    var blueprint = new Blueprint(profile);
    console.log(blueprint.system);
    solSys = JSON.parse(JSON.stringify(blueprint.system));
    //Clear the previous system from the scene
    for(var i = 0; i < rootGroup.children.length; i++){
        rootGroup.remove(rootGroup.children[i]);
    }
    camera.position.set(0, 0, 15); //Need to change this based on the total system width
    controls.update();
    var start = Date.now();
    addPlanets(solSys, rootGroup);
    console.log(`Planet adding finished and took ${(Date.now() - start) / 1000} seconds`);
    updatePlanets(solSys, solSys.spriteGroup.position);
    systemExists = true;
}

//The addPlanets function is used to add the planets of the solSys object to the threejs scene
var addPlanets = function(planet, parentGroup){
    //Create orbit group
    var orbitGroup = new THREE.Group();
    //orbitGroup.rotation.set(Math.floor(random() * 2 * Math.PI), Math.floor(random() * 2 * Math.PI), Math.floor(random  () * 2 * Math.PI));
    planet.orbitGroup = orbitGroup;
    //Create sprite group
    var spriteGroup = new THREE.Group();
    planet.spriteGroup = spriteGroup;
    //Create back ring
    if(planet.ring){
        var ringScale = new THREE.Matrix4();
        ringScale.makeScale(planet.scale, planet.scale, 1); //Maybe change this
        var ringIndex = Math.floor(random() * ringMaterials.length / 2);
        //var ringSpriteA = new THREE.Sprite(ringMaterials[ringIndex]);
        var ringSpriteA = new THREE.Sprite();
        ringSpriteA.applyMatrix(ringScale);
        spriteGroup.add(ringSpriteA);
    }
    //Create planet sprite
    var planetScale = new THREE.Matrix4();
    planetScale.makeScale(planet.scale, planet.scale, 1);
    var planetSprite = new THREE.Sprite((parentGroup === rootGroup) ? sunMaterials[Math.floor(random() * sunMaterials.length)] : planetMaterials[Math.floor(random() * planetMaterials.length)]);
    planetSprite.applyMatrix(planetScale);
    spriteGroup.add(planetSprite);
    //Create front ring
    if(planet.ring){
        //var ringSpriteB = new THREE.Sprite(ringMaterials[ringIndex + 1]);
        var ringSpriteB = new THREE.Sprite();
        ringSpriteB.applyMatrix(ringScale);
        spriteGroup.add(ringSpriteB);
    }
    //Create planet orbit path
    var orbitPath = new THREE.LineLoop(orbitPathGeometry, orbitPathMaterial);
    var orbitPathScale = new THREE.Matrix4();
    orbitPathScale.makeScale(planet.orbitRadius, planet.orbitRadius, 1);
    orbitPath.applyMatrix(orbitPathScale);
    orbitGroup.add(orbitPath, spriteGroup);
    //Add to parent planet
    parentGroup.add(orbitGroup);
    //Add planet children
    if(planet.children){
        for(var i = 0; i < planet.children.length; i++){
            addPlanets(planet.children[i], orbitGroup);
        }
    }
}

//The updatePlanets function updates the positions of the planets of the solSys object
var updatePlanets = function(planet, parentPosition){
    planet.spriteGroup.position.set(Math.cos(timer.getElapsedSeconds() * planet.speed) * planet.orbitRadius, Math.sin(timer.getElapsedSeconds() * planet.speed) * planet.orbitRadius, 0);
    planet.orbitGroup.position.set(parentPosition.x, parentPosition.y, parentPosition.z);
    if(planet.children){
        for(var i = 0; i < planet.children.length; i++){
            updatePlanets(planet.children[i], planet.spriteGroup.position);
        }
    }
}

//The render function is the main render loop
var render = function(){
    requestAnimationFrame(render);
    var delta = timer.getDeltaTime();

    if (systemExists) updatePlanets(solSys, solSys.spriteGroup.position);

    renderer.render(scene, camera);
}

//The resizeCanvas function is used to resize the renderer and camera with the window
var resizeCanvas = function(){
    renderer.setSize(window.innerWidth, window.innerHeight);
    camera.aspect = window.innerWidth / window.innerHeight;
    camera.updateProjectionMatrix();
}

// The Blueprint class turns factorization profiles into recursive collections of planets that can be easily parsed by the graphical functions like addPlanets
var Blueprint = function (profile) {
    this.profile = JSON.parse(profile);
    this.system = {
        type: Blueprint.POSITIVE,
        ring: false,
        orbitRadius: 0,
        scale: 1,
        speed: 0,
        children: []
    }
    this.orbitHistory = [this.system];
    this.genChildren(this.profile);
    this.setSystemWidths(this.system, 0);
}

//The genChildren function takes in a FactorProfile node and decides what to do
Blueprint.prototype.genChildren = function (node) {
    if (node.isPrime) {
        if (isNaN(node.piX) === true) {
            var newLength = this.orbitHistory[this.orbitHistory.length - 1].children.push({
                type: Blueprint.SKIP,
                ring: (Math.floor(random() * 10) === 0),
                orbitRadius: undefined,
                scale: Math.pow(Blueprint.CHILD, this.orbitHistory.length),
                speed: 0,
                children: []
            });
            this.orbitHistory.push(this.orbitHistory[this.orbitHistory.length - 1].children[newLength - 1]);
            this.genChildren(node.piX);
            this.orbitHistory.pop();
        } else if (parseInt(node.piX) === 1) {
            this.orbitHistory[this.orbitHistory.length - 1].children.push({
                type: Blueprint.SKIP,
                ring: (Math.floor(random() * 10) === 0),
                orbitRadius: undefined,
                scale: Math.pow(Blueprint.CHILD, this.orbitHistory.length),
                speed: 0,
                children: []
            });
        } else if (parseInt(node.piX) === 0) {
            // Do nothing
        } else {
            throw "piX type error: " + node.piX;
        }

        if (isNaN(node.power) === true) {
            var newLength = this.orbitHistory[this.orbitHistory.length - 1].children.push({
                type: Blueprint.POSITIVE,
                ring: (Math.floor(random() * 10) === 0),
                orbitRadius: undefined,
                scale: Math.pow(Blueprint.CHILD, this.orbitHistory.length),
                speed: 0,
                children: []
            });
            this.orbitHistory.push(this.orbitHistory[this.orbitHistory.length - 1].children[newLength - 1]);
            this.genChildren(node.power);
            this.orbitHistory.pop();
        } else if (parseInt(node.power) === 1) {
            this.orbitHistory[this.orbitHistory.length - 1].children.push({
                type: Blueprint.POSITIVE,
                ring: (Math.floor(random() * 10) === 0),
                orbitRadius: undefined,
                scale: Math.pow(Blueprint.CHILD, this.orbitHistory.length),
                speed: 0,
                children: []
            });
        } else if (parseInt(node.power) === 0) {
            throw "power type error: 0";
        } else {
            throw "power type error: " + node.power;
        }        
    } else {
        if(node.factors){
            for (var ii = 0; ii < node.factors.length; ii++) {
                this.genChildren(node.factors[ii]);
            }
        }
    }
}

//The setSystemWidths function is used to calculate and set the widths of given planet systems, and in the process set radii.
Blueprint.prototype.setSystemWidths = function(system, depth){
    var width = 1;
    var radius = 0.5;
    if(system.children){
        width += 2 * system.children.length * Blueprint.SPACING;
        for(var i = 0; i < system.children.length; i++){
            radius += Blueprint.SPACING;
            width += 2 * Blueprint.CHILD * this.setSystemWidths(system.children[i], depth + 1);
            radius += Blueprint.CHILD * system.children[i].width / 2;
            system.children[i].orbitRadius = Math.pow(Blueprint.CHILD, depth) * radius;
            radius += Blueprint.CHILD * system.children[i].width / 2;
        }
    }
    system.width = width;
    return width;
}

Blueprint.SKIP = 0;
Blueprint.POSITIVE = 1;
Blueprint.NEGATIVE = -1;
Blueprint.CHILD = 0.618033988749894;
Blueprint.SPACING = Math.pow(0.618033988749894, 2);

// The remoteFactorize function is used to make requests for factorization to the AWS Lambda function that has been loaded onto the endpoint in the code below.
/*var remoteFactorize = function (number, callback) {
    var req = new XMLHttpRequest();
    req.open("GET", "https://n3dl2qh6kj.execute-api.us-west-2.amazonaws.com/prod/factorize/?number=" + number.toString());
    req.setRequestHeader("x-api-key", "LtXAQm6tm05M7sd42Tcl72fyF328LCWd3wrXvWHM");
    req.onreadystatechange = (function (callback) {
        if (this.readyState == XMLHttpRequest.DONE && this.status == 200) {
            callback(JSON.parse(JSON.parse(this.response).body));
        }
    }).bind(req, callback);
    req.send();
}*/

var planet1 = function(){
    var ctx=document.getElementById("planetCanvas").getContext("2d");var funcNames=["clearRect","save","translate","scale","beginPath","moveTo","bezierCurveTo","closePath","fill","stroke","restore","rotate","arc","lineTo"];for(var ii=0;ii<funcNames.length;ii++)window["f"+ii.toString()]=ctx[funcNames[ii]].bind(ctx);ctx.save();ctx.strokeStyle="transparent";f0(0,0,1E3,1E3);f1();f2(0,0);f3(37.795,37.795);f1();f2(0,-270.542);f1();ctx.fillStyle="#0cf";f4();f5(13.229,270.542);
    f6(20.535,270.542,26.458,276.464,26.458,283.771);f6(26.458,291.077,20.535,297,13.229,297);f6(5.922,297,0,291.077,0,283.771);f6(0,276.464,5.922,270.542,13.229,270.542);f7();f8();f9();f10();f1();ctx.fillStyle="#c87137";f4();f5(4.86,286.31);f6(4.618,286.308,4.365,286.342,4.104,286.417);f6(3.543,286.577,2.104,287.046,1.519,287.673);f6(1.089,288.133,1.472,288.711,1.163,289.195);f2(13.231,283.77);f12(0,0,13.232,2.719,2.371,1);f2(-13.231,-283.77);f13(3.743,292.991);f6(4.049,293.306,4.37,293.604,4.705,293.887);
    f13(4.709,293.89);f6(5.492,294.544,6.346,295.12,7.258,295.575);f6(7.342,295.326,7.1,294.751,7.229,294.373);f6(7.398,293.883,7.943,293.544,8.02,292.948);f6(8.048,292.724,8.673,292.524,8.741,292.308);f6(8.93,291.728,8.436,292.266,8.386,291.642);f6(8.371,291.453,7.738,291.437,7.702,291.234);f6(7.57,290.498,8.008,289.539,7.957,289.26);f6(7.873,288.79,8.159,288.022,7.767,287.59);f6(7.297,287.071,6.096,286.913,5.411,286.679);f6(5.157,286.592,5.144,286.308,4.859,286.308);f7();f5(13.23,270.542);
    f2(13.228,283.771);f12(0,0,13.23,-1.57,-2.241,1);f2(-13.228,-283.771);f13(5.005,273.409);f6(4.662,273.682,4.332,273.971,4.018,274.276);f13(4.005,274.288);f6(3.695,274.591,3.399,274.908,3.118,275.24);f13(3.103,275.257);f2(13.229,283.771);f12(0,0,13.23,-2.442,-3.141,1);f2(-13.229,-283.771);f6(.512,283.104,1.025,282.661,1.529,282.339);f6(1.775,282.183,1.755,282.339,2.019,282.335);f6(2.234,282.332,2.564,281.71,2.767,281.626);f6(4.297,281.006,5.687,280.917,6.413,277.89);
    f6(6.527,277.417,7.036,277.436,7.138,276.92);f6(7.284,276.172,6.753,275.997,7.203,275.407);f6(7.399,275.15,7.941,275.667,8.207,275.436);f6(8.651,275.052,9.185,273.694,9.687,273.331);f6(10.615,272.661,12.246,272.571,13.109,272.217);f6(14.372,271.698,14.744,271.023,15.028,270.664);f2(13.226,283.798);f12(0,0,13.257,-1.434,-1.57,1);f2(-13.226,-283.798);f7();f5(21.41,273.374);f6(21.045,273.895,20.682,273.156,20.298,275.367);f6(20.085,276.597,18.85,277.485,18.269,278.484);
    f6(18.014,278.922,18.415,279.747,17.849,279.896);f6(16.955,280.131,16.185,279.982,15.342,280.042);f6(14.536,280.101,13.652,280.372,13.072,280.385);f6(11.702,280.412,11.044,280.024,10.677,280.44);f6(10.362,280.799,10.985,281.398,11.119,282.287);f6(11.141,282.434,10.492,282.919,10.307,283.301);f6(10.157,283.61,10.461,283.822,10.5,283.961);f6(10.552,284.147,10.852,284.053,11.37,283.945);f6(11.555,283.906,11.904,284.325,12.392,284.168);f6(13.022,283.965,13.82,283.173,14.109,283.108);
    f6(15.06,282.894,14.688,283.249,14.797,283.613);f6(15.202,284.969,16.489,286.481,16.067,287.56);f6(15.712,288.473,17.1,288.933,17.37,288.984);f6(17.755,289.057,17.217,288.4,17.684,287.863);f6(18.202,287.267,18.387,286.422,19.021,285.792);f6(19.274,285.54,19.806,285.897,20.077,285.679);f6(20.419,285.404,20.314,284.453,20.61,284.189);f6(21.377,283.501,22.376,283.64,22.517,283.961);f6(22.621,284.198,22.963,283.926,23.032,284.131);f6(23.161,284.517,22.972,285.34,22.995,285.631);
    f6(23.144,287.527,21.319,287.654,21.295,289.43);f6(21.292,289.645,21.59,289.947,21.607,290.145);f6(21.632,290.438,21.291,290.784,21.4,291.013);f6(21.583,291.397,21.785,291.895,22.102,292.133);f6(22.314,292.291,22.881,291.705,23.299,291.628);f6(23.677,291.558,23.534,291.738,23.914,291.572);f2(13.222,283.769);f12(0,0,13.236,.63,0,1);f2(-13.222,-283.769);f2(13.215,283.777);f12(0,0,13.243,-0,-.903,1);f2(-13.215,-283.777);f7();f8();f9();f10();f1();ctx.fillStyle="#c87137";f4();f5(10.178,275.164);
    f6(10.228,275.441,10.3,275.103,10.665,275.282);f6(10.799,275.347,10.948,275.669,11.197,275.828);f6(11.43,275.977,11.762,275.957,11.947,276.126);f6(12.102,276.268,11.911,276.446,12.107,276.545);f6(12.341,276.662,12.742,276.885,13.213,276.912);f6(13.54,276.932,13.935,276.758,14.183,276.799);f6(14.606,276.866,14.584,277.125,14.854,277.058);f6(15.51,276.893,15.654,276.876,15.838,276.272);f6(15.888,276.108,15.324,276.039,15.296,275.783);f6(15.269,275.533,15.454,275.713,15.448,275.423);
    f6(15.443,275.127,14.866,274.62,14.718,274.257);f6(14.611,273.996,14.966,273.837,14.793,273.757);f6(14.069,273.427,13.289,274.773,12.692,275.097);f6(12.557,275.169,12.612,274.856,12.487,274.82);f2(13.161,272.31);f12(0,0,2.6,1.833,2.27,0);f2(-13.161,-272.31);f6(11.224,274.094,11.414,274.068,11.127,273.876);f6(10.84,273.686,10.673,273.792,10.541,273.932);f6(10.358,274.124,10.423,274.514,10.344,274.739);f6(10.311,274.847,10.128,274.888,10.179,275.163);f7();f5(14.943,294.211);f2(14.994,294.583);
    f12(0,0,.376,-1.707,-2.16,1);f2(-14.994,-294.583);f6(14.281,294.578,14.181,294.473,13.903,295.041);f6(13.624,295.606,14.043,295.558,13.786,295.954);f6(13.666,296.138,13.758,296.541,13.464,296.626);f6(13.169,296.712,12.588,296.591,12.438,296.976);f6(12.703,296.998,12.964,296.995,13.229,297);f2(13.225,283.76);f12(0,0,13.24,1.57,1.06,1);f2(-13.225,-283.76);f6(19.077,295.324,18.747,295.066,18.503,295.143);f6(18.218,295.233,17.89,295.428,17.729,295.308);f6(17.555,295.178,17.294,295.135,17.288,294.988);
    f6(17.284,294.852,17.528,294.614,17.621,294.419);f6(17.813,294.017,15.681,294.526,15.384,294.722);f6(15.123,294.892,15.245,294.185,14.942,294.211);f7();f5(9.085,290.978);f6(9.038,290.941,9.122,290.873,9.115,290.803);f6(9.109,290.735,9.039,290.606,9.047,290.528);f6(9.064,290.348,9.191,290.215,9.296,290.136);f6(9.493,289.989,9.686,290.256,9.904,290.16);f6(10.046,290.097,10.242,289.91,10.344,289.745);f6(10.4,289.655,10.33,289.531,10.43,289.528);f6(10.633,289.522,10.79,289.7,10.9,289.916);
    f6(10.944,290.004,11.093,290.1,11.038,290.183);f6(10.933,290.343,10.813,290.272,10.734,290.367);f6(10.539,290.602,10.351,290.91,10.15,290.931);f6(9.984,290.949,10.057,290.881,9.99,290.802);f6(9.941,290.747,9.753,290.674,9.67,290.674);f6(9.621,290.674,9.605,290.76,9.558,290.799);f2(9.066,290.22);f12(0,0,.759,.867,1.547,0);f2(-9.066,-290.22);f7();f8();f9();f10();f10();f10();ctx.restore();    
    return document.getElementById("planetCanvas").toDataURL();
}

var planet2 = function(){
    for(var ctx=document.getElementById("planetCanvas").getContext("2d"),funcNames="clearRect save translate scale beginPath arc closePath fill stroke restore moveTo bezierCurveTo rotate".split(" "),ii=0;ii<funcNames.length;ii++)window["f"+ii.toString()]=ctx[funcNames[ii]].bind(ctx);ctx.save();ctx.strokeStyle="transparent";f0(0,0,1E3,1E3);f1();f2(0,0);f2(1.889763728968319E-5,0);f3(37.7952746382293,37.7952746382293);f2(0,0);f1();f2(0,-270.542);f1();ctx.fillStyle="#08a";f4();
    f5(13.229,283.771,13.229,0,6.283185307179586,!0);f6();f7();f8();f9();f1();ctx.fillStyle="green";f4();f10(20.917,277.081);f11(20.372,277.021,19.072000000000003,278.091,18.307000000000002,278.21700000000004);f11(17.231,278.27500000000003,16.05,278.66,14.930000000000003,278.33700000000005);f11(13.327000000000004,277.87700000000007,9.098000000000003,278.76000000000005,7.546000000000003,279.189);f11(7.1060000000000025,279.31,9.286000000000003,278.454,8.852000000000004,278.511);
    f11(5.816000000000004,278.90500000000003,3.1890000000000036,280.119,3.552713678800501E-15,283.771);f11(3.552713678800501E-15,284.10400000000004,.013000000000003552,284.434,.03700000000000355,284.761);f11(.04700000000000355,284.906,2.8410000000000033,282.824,2.9580000000000033,282.738);f11(5.426,280.909,.1,285.412,.115,285.52);f11(.139,285.704,.167,285.888,.199,286.07);f11(.21400000000000002,286.155,1.869,284.965,3.4899999999999998,284.493);f11(6.268,283.686,9.554,283.564,9.693,283.517);
    f11(9.959999999999999,283.427,11.934,283.23,12.027999999999999,283.474);f11(12.078,283.60699999999997,10.794999999999998,283.989,10.155999999999999,284.32);f11(9.145999999999999,284.844,6.172999999999998,285.763,4.752999999999999,286.314);f11(2.5629999999999993,287.16400000000004,.4499999999999993,287.208,.472999999999999,287.29200000000003);f11(.572999999999999,287.651,.6859999999999989,288.004,.8129999999999991,288.35);
    f11(2.056999999999999,288.728,3.2749999999999995,288.637,4.5569999999999995,288.368);f11(5.111999999999999,288.252,5.702,288.665,6.287999999999999,288.506);f11(6.427,288.46799999999996,5.952999999999999,288.414,5.642999999999999,288.26199999999994);f11(5.442999999999999,288.16399999999993,5.439999999999999,287.88599999999997,5.527999999999999,287.85799999999995);f11(5.758999999999999,287.78499999999997,6.611999999999998,287.66299999999995,7.217999999999998,287.45599999999996);
    f11(7.957999999999998,287.203,8.424999999999999,286.883,8.787999999999998,286.806);f11(9.166999999999998,286.726,9.825999999999999,287.24899999999997,10.377999999999998,287.19399999999996);f11(10.569999999999999,287.174,10.141999999999998,287.063,9.867999999999999,286.92699999999996);f11(9.633999999999999,286.81199999999995,9.615999999999998,286.575,9.739999999999998,286.549);f11(9.926999999999998,286.512,10.466999999999999,287.114,11.011999999999999,287.483);
    f11(11.355999999999998,287.717,11.831999999999999,287.694,11.963999999999999,287.606);f11(12.111999999999998,287.508,11.585999999999999,287.389,11.389999999999999,287.341);f11(11.116,287.273,10.691999999999998,286.675,10.988,286.544);f11(11.283,286.414,11.062999999999999,285.7,11.386,285.76);f11(11.652,285.81,11.59,285.443,11.098999999999998,285.49);f11(10.687999999999999,285.53000000000003,9.831999999999999,285.89,9.514,285.827);f11(9.365,285.797,10.453999999999999,284.837,10.67,284.703);
    f11(11.467,284.207,15.754,282.49499999999995,16.839,283.83);f11(17.551,284.69,20.628999999999998,282.928,20.887999999999998,282.54699999999997);f11(21.08,282.263,18.697999999999997,283.544,18.006999999999998,282.97099999999995);f11(17.738999999999997,282.74899999999997,14.718999999999998,282.42599999999993,14.436999999999998,282.203);f11(13.603999999999997,281.54299999999995,12.282999999999998,281.50699999999995,11.923999999999998,280.85299999999995);
    f11(11.521999999999998,280.11699999999996,14.646999999999998,280.715,14.697999999999997,280.05099999999993);f11(14.701999999999996,279.99799999999993,15.994999999999997,280.8039999999999,17.099999999999998,280.8569999999999);f11(18.439999999999998,280.9219999999999,19.659999999999997,280.2349999999999,19.968999999999998,280.1289999999999);f11(20.825999999999997,279.8359999999999,21.799,278.8389999999999,21.525,278.9639999999999);
    f11(21.176,279.1239999999999,19.180999999999997,280.06099999999986,18.881,279.6699999999999);f11(18.446,279.1039999999999,20.325,279.4499999999999,19.535,278.6409999999999);f11(19.295,278.3959999999999,21.4,277.13499999999993,20.917,277.0809999999999);f6();f10(5.092,282.52);f11(5.569,282.48199999999997,6.406,282.81199999999995,6.981,282.782);f11(7.638,282.74899999999997,9.398,282.828,8.431,282.899);f2(14.838095504024537,353.25787738730855);f12(0);f3(1,1);
    f5(0,0,70.65,-1.6616089306370527,-1.7079148449615573,1);f3(1,1);f12(0);f2(-14.838095504024537,-353.25787738730855);f11(4.5729999999999995,283.367,2.894999999999999,284.10900000000004,2.887999999999999,283.975);f11(2.873999999999999,283.714,4.497999999999999,282.73900000000003,4.911,282.56);f2(5.121483145025801,283.0821741526158);f12(0);f3(1,1);f5(0,0,.563,-1.953963599171716,-1.6249669461661786,0);f3(1,1);f12(0);f2(-5.121483145025801,-283.0821741526158);f6();f7();f8();f9();f1();ctx.fillStyle="green";
    f4();f10(23.24,277.357);f11(23.055,277.53000000000003,22.346999999999998,277.536,21.903,277.79400000000004);f11(21.197,278.20500000000004,20.544999999999998,278.87500000000006,20.512999999999998,278.76000000000005);f11(20.395999999999997,278.3430000000001,22.285999999999998,276.79800000000006,21.816999999999997,276.39500000000004);f11(21.656999999999996,276.25800000000004,21.615999999999996,276.75300000000004,20.799999999999997,276.75200000000007);
    f11(19.74,276.75000000000006,18.115999999999996,277.4720000000001,18.775,276.9720000000001);f11(19.223,276.6310000000001,20.648999999999997,276.0680000000001,20.854999999999997,275.6590000000001);f11(21.209999999999997,274.9530000000001,21.668999999999997,274.7150000000001,21.591999999999995,273.5190000000001);f2(13.171737475058556,283.8270201305134);f12(0);f3(1,1);f5(0,0,13.31,-.8858560155938993,-.6909462991529811,0);f3(1,1);f12(0);f2(-13.171737475058556,-283.8270201305134);
    f11(23.443999999999996,275.3630000000001,23.390999999999995,275.7280000000001,23.281999999999996,275.9850000000001);f11(23.174999999999997,276.2400000000001,22.949999999999996,276.5980000000001,22.961999999999996,276.6180000000001);f11(22.981999999999996,276.6560000000001,23.287999999999997,276.25400000000013,23.426999999999996,276.0380000000001);f11(23.566999999999997,275.8200000000001,23.600999999999996,275.5580000000001,23.616999999999997,275.5790000000001);
    f11(23.757999999999996,275.7570000000001,23.894,275.93900000000014,24.025,276.1230000000001);f11(23.294999999999998,277.0620000000001,23.752,276.8760000000001,23.238999999999997,277.3570000000001);f6();f10(14.472,285.95);f11(15.312,285.827,15.905,286.341,16.811999999999998,286.392);f11(17.372999999999998,286.424,18.019999999999996,286.313,18.551999999999996,286.288);f11(18.880999999999997,286.273,19.164999999999996,286.29,19.360999999999997,286.392);
    f11(19.603999999999996,286.519,18.993,286.462,18.613999999999997,286.52);f11(18.397,286.55199999999996,18.293999999999997,286.668,18.208999999999996,286.75);f11(18.130999999999997,286.827,18.061999999999998,286.872,18.168999999999997,286.906);f11(18.562999999999995,287.036,20.248999999999995,286.541,20.994999999999997,286.699);f11(21.740999999999996,286.858,21.938999999999997,286.91700000000003,22.400999999999996,287.30400000000003);
    f11(22.863999999999997,287.692,21.767999999999997,287.019,21.079999999999995,287.047);f11(20.391999999999996,287.074,19.221999999999994,287.552,18.308999999999994,287.51500000000004);f11(17.394999999999992,287.47700000000003,15.216999999999993,285.97300000000007,15.174999999999994,286.64900000000006);f11(15.154999999999994,286.96900000000005,15.666999999999994,287.31600000000003,16.177999999999994,287.5060000000001);
    f11(16.745999999999995,287.71600000000007,17.629999999999995,287.5570000000001,17.103999999999992,287.7830000000001);f11(16.481999999999992,288.05100000000004,15.988999999999992,287.5420000000001,15.384999999999993,287.6430000000001);f11(14.781999999999993,287.74500000000006,14.286999999999992,288.54800000000006,13.467999999999993,288.3330000000001);f11(12.881999999999993,288.1790000000001,13.795999999999992,288.2070000000001,14.358999999999993,287.9030000000001);
    f11(14.557999999999993,287.79600000000005,14.668999999999993,287.4910000000001,14.706999999999994,287.3980000000001);f11(14.851999999999993,287.04100000000005,15.481999999999994,287.17800000000005,14.589999999999993,286.64900000000006);f11(12.771999999999993,285.7130000000001,11.684999999999993,287.09700000000004,12.067999999999993,286.50800000000004);f11(12.449999999999992,285.91800000000006,13.849999999999993,286.02200000000005,14.471999999999992,285.949);f6();f10(17.76,290.024);
    f11(16.455000000000002,291.389,12.907000000000002,293.557,11.377000000000002,293.891);f11(9.351000000000003,294.334,9.192000000000002,296.523,7.445000000000002,295.671);f2(13.228375730434525,283.78759892284114);f12(0);f3(1,1);f5(0,0,13.216,2.0237286873609923,2.1594773014734505,0);f3(1,1);f12(0);f2(-13.228375730434525,-283.78759892284114);f11(5.753000000000002,294.688,7.411000000000002,294.025,8.650000000000002,293.383);f11(9.471000000000002,292.957,9.990000000000002,292.517,9.982000000000003,292.409);
    f11(9.976000000000003,292.316,8.784000000000002,293.319,7.161000000000003,293.579);f11(5.876000000000003,293.784,4.649000000000003,293.842,4.546000000000003,293.752);f2(13.278627936500571,283.7218150404567);f12(0);f3(1,1);f5(0,0,13.299,2.2871486379594894,2.570643997295426,0);f3(1,1);f12(0);f2(-13.278627936500571,-283.7218150404567);f11(2.872000000000003,290.253,6.635000000000003,291.522,7.731000000000003,291.408);
    f11(10.010000000000003,291.16900000000004,9.477000000000004,291.774,11.388000000000003,291.76500000000004);f11(11.868000000000004,291.76300000000003,12.543000000000003,290.37500000000006,13.715000000000003,290.01800000000003);f11(14.253000000000004,289.85400000000004,14.448000000000004,289.615,14.790000000000003,289.48900000000003);f11(14.960000000000003,289.427,15.168000000000003,289.35,15.472000000000003,289.41);
    f11(15.658000000000003,289.447,15.404000000000003,289.40500000000003,14.953000000000003,289.598);f11(14.453000000000003,289.813,13.873000000000003,290.451,14.123000000000003,290.357);f11(14.255000000000003,290.307,14.528000000000002,290.271,14.759000000000002,290.16900000000004);f11(15.439000000000002,289.87300000000005,16.272000000000002,289.321,17.123,289.19000000000005);f11(17.585,289.12000000000006,18.056,289.34600000000006,18.437,289.33900000000006);
    f11(18.67,289.31600000000003,19.123,289.23300000000006,19.401,289.26000000000005);f11(19.635,289.28400000000005,20.141,289.67300000000006,19.723,289.50800000000004);f11(19.305,289.343,18.25,289.53400000000005,17.761,290.02400000000006);f6();f10(10.354,272.712);f11(9.675999999999998,272.87399999999997,9.119,273.25,8.411,273.496);f11(8.202,273.56899999999996,7.970999999999999,273.601,7.731,273.623);f11(7.5409999999999995,273.64099999999996,8.657,273.239,8.445,273.209);
    f11(8.227,273.178,7.8740000000000006,273.412,7.313000000000001,273.519);f11(6.4990000000000006,273.674,5.390000000000001,273.714,4.801,273.574);f11(6.487,272.178,8.74,271.689,10.977,271.267);f11(11.777000000000001,271.117,12.386000000000001,270.542,13.229,270.542);f11(13.899,270.542,14.559,270.592,15.202,270.688);f11(15.298,270.702,14.078,270.86699999999996,13.232,271.11899999999997);f11(12.114999999999998,271.452,11.286999999999999,271.89399999999995,11.411,271.919);
    f11(11.495,271.936,12.628,271.30899999999997,13.777,271.166);f11(14.982,271.016,16.288,270.896,16.377,270.918);f11(16.89,271.043,17.391,271.198,17.88,271.382);f11(14.87,271.942,11.844,272.356,10.354,272.712);f6();f7();f8();f9();f1();ctx.fillStyle="green";f4();f10(26.458,283.77);f11(26.458,284.09999999999997,26.445999999999998,284.426,26.423,284.74899999999997);f11(26.407999999999998,284.95099999999996,25.639,284.39,24.776999999999997,284.12399999999997);
    f11(24.169999999999998,283.936,23.383,283.99399999999997,23.360999999999997,284.13399999999996);f11(23.340999999999998,284.26399999999995,24.316999999999997,284.47399999999993,24.882999999999996,284.92999999999995);f11(25.687999999999995,285.5799999999999,26.172999999999995,286.52599999999995,26.130999999999997,286.70699999999994);f2(13.325712219344028,283.80501708230673);f12(0);f3(1,1);f5(0,0,13.13,.2228594556532379,.4286153444761542,0);f3(1,1);f12(0);f2(-13.325712219344028,-283.80501708230673);
    f11(24.070999999999998,290.1789999999999,22.468999999999998,291.06899999999996,21.413999999999998,290.87199999999996);f11(21.273999999999997,290.847,22.336,290.73099999999994,23.336999999999996,290.05299999999994);f11(24.045999999999996,289.5729999999999,24.673999999999996,288.59799999999996,25.042999999999996,288.12299999999993);f11(25.480999999999995,287.5609999999999,24.185999999999996,287.44999999999993,24.150999999999996,286.98599999999993);
    f11(24.076999999999995,285.9959999999999,22.810999999999996,284.84299999999996,21.490999999999996,284.6019999999999);f11(20.484999999999996,284.4189999999999,19.280999999999995,285.09899999999993,19.523999999999997,284.8289999999999);f11(20.438,283.8119999999999,22.035999999999998,284.2119999999999,22.720999999999997,283.8139999999999);f11(23.561999999999998,283.3239999999999,25.465999999999998,283.6189999999999,26.458,283.7709999999999);f6();f10(15.068,273.169);
    f11(14.602,273.493,14.123999999999999,274.034,13.424,274.222);f11(11.681999999999999,274.68899999999996,8.527999999999999,273.98199999999997,6.781999999999999,274.69);f11(6.590999999999999,274.767,6.114999999999999,274.853,5.725999999999999,275.055);f11(5.364999999999999,275.242,5.147999999999999,275.168,4.989999999999999,275.26300000000003);f11(4.859999999999999,275.343,5.231999999999999,275.43300000000005,5.672,275.30800000000005);
    f11(6.112,275.18300000000005,5.361,276.01200000000006,5.167999999999999,276.16100000000006);f11(4.922999999999999,276.3550000000001,4.887999999999999,276.71200000000005,4.6419999999999995,276.95300000000003);f11(4.302999999999999,277.283,3.8059999999999996,277.459,3.4609999999999994,277.78700000000003);f11(2.9059999999999993,278.312,2.5349999999999993,278.96700000000004,2.2679999999999993,279.32000000000005);f11(1.9459999999999993,279.74700000000007,3.0949999999999993,278.838,3.7859999999999996,278.12500000000006);
    f11(4.154,277.74500000000006,4.645,277.74500000000006,4.9399999999999995,277.51200000000006);f11(5.515,277.06200000000007,7.2379999999999995,277.4870000000001,8.282,277.46900000000005);f11(8.532,277.46500000000003,8.742,277.3670000000001,8.835,277.27900000000005);f11(8.888000000000002,277.22900000000004,8.575000000000001,277.29100000000005,8.405000000000001,277.30100000000004);f11(8.317000000000002,277.30600000000004,7.910000000000001,277.18100000000004,8.391000000000002,277.1580000000001);
    f11(8.872000000000002,277.1360000000001,9.261000000000001,275.7050000000001,10.196000000000002,275.62500000000006);f11(11.132000000000001,275.5450000000001,13.898000000000001,278.02500000000003,14.64,276.84100000000007);f11(15.382000000000001,275.65600000000006,19.583,275.40600000000006,18.896,274.7830000000001);f11(18.839000000000002,274.7320000000001,18.556,275.07000000000005,18.375,275.0270000000001);f11(18.171,274.9780000000001,18.059,274.5500000000001,17.798000000000002,274.5600000000001);
    f11(17.331000000000003,274.5780000000001,16.923000000000002,274.9020000000001,16.648000000000003,275.0550000000001);f11(16.498000000000005,275.13800000000015,15.753000000000004,275.33300000000014,15.656000000000002,275.28000000000014);f11(15.576000000000002,275.2350000000001,16.011000000000003,275.10100000000017,16.14,275.04000000000013);f11(16.274,274.97700000000015,16.452,274.8720000000001,16.399,274.74200000000013);
    f11(16.199,274.2550000000001,15.306000000000001,274.0650000000001,15.619000000000002,273.5120000000001);f11(15.842000000000002,273.1200000000001,16.309,272.97000000000014,16.669,272.9020000000001);f11(16.903000000000002,272.8580000000001,17.594,273.0530000000001,17.083000000000002,272.7280000000001);f11(16.477,272.34300000000013,15.373000000000001,272.95800000000014,15.068000000000001,273.1680000000001);f6();f10(23.2,292.465);f2(13.169378424757975,283.71612974068717);f12(0);f3(1,1);
    f5(0,0,13.31,.7172511360874249,.7939647623881833,0);f3(1,1);f12(0);f2(-13.169378424757975,-283.71612974068717);f11(22.389,293.318,20.916,293.73199999999997,20.571,293.72099999999995);f11(20.226000000000003,293.7099999999999,18.428,293.75999999999993,18.171000000000003,294.08299999999997);f2(17.44089405541228,293.4070042088313);f12(0);f3(1,1);f5(0,0,.995,.7469347540433593,1.5737049293003071,0);f3(1,1);f12(0);f2(-17.44089405541228,-293.4070042088313);
    f11(17.005000000000003,294.392,16.418000000000003,294.276,16.563000000000002,294.356);f11(16.645000000000003,294.401,16.759000000000004,294.634,17.035000000000004,294.663);f11(17.380000000000003,294.699,17.981000000000005,294.914,18.280000000000005,294.72);f11(19.000000000000004,294.254,20.002000000000006,294.08000000000004,20.275000000000006,294.113);f11(20.867000000000004,294.183,21.306000000000004,294.249,21.236000000000004,294.303);
    f11(20.838000000000005,294.606,20.422000000000004,294.887,19.990000000000006,295.144);f11(19.498000000000005,295.438,19.370000000000005,295.2,18.206000000000007,295.68);f11(16.771000000000008,296.273,17.03300000000001,296.469,16.282000000000007,296.646);f11(15.302000000000007,296.87800000000004,14.280000000000008,297,13.229000000000006,297);f11(13.144000000000005,297,13.353000000000007,296.677,13.921000000000006,296.511);
    f11(14.716000000000006,296.279,15.924000000000007,296.25100000000003,15.841000000000006,296.17600000000004);f11(15.761000000000006,296.10400000000004,14.837000000000007,296.09000000000003,13.886000000000006,296.2950000000001);f11(13.025000000000006,296.4800000000001,12.101000000000006,296.9530000000001,12.005000000000006,296.94500000000005);f2(13.20725094635237,283.8330023771359);f12(0);f3(1,1);f5(0,0,13.167,1.6622315663212173,1.8796436813613764,0);f3(1,1);f12(0);f2(-13.20725094635237,-283.8330023771359);
    f11(15.419000000000006,296.1240000000001,13.561000000000005,294.75500000000005,13.985000000000007,294.34100000000007);f11(14.572000000000006,293.7680000000001,17.234000000000005,292.1940000000001,17.906000000000006,292.43100000000004);f11(18.031000000000006,292.475,17.526000000000007,292.586,17.226000000000006,292.81100000000004);f11(16.986000000000008,292.99100000000004,16.820000000000007,293.115,16.881000000000007,293.10100000000006);
    f11(17.675000000000008,292.91100000000006,19.080000000000005,292.2610000000001,19.419000000000008,292.3310000000001);f11(19.759000000000007,292.4000000000001,20.62100000000001,291.6620000000001,20.308000000000007,292.19000000000005);f11(19.995000000000008,292.7180000000001,22.010000000000005,291.82300000000004,23.201000000000008,292.46500000000003);f6();f10(25.567,280.394);f11(24.669,279.462,24.347,280.86400000000003,23.512,281.214);f11(23.382,281.268,23.649,280.787,23.35,280.66);
    f11(22.950000000000003,280.49,22.200000000000003,280.48900000000003,21.601000000000003,280.80800000000005);f11(21.293000000000003,280.97300000000007,20.987000000000002,281.80800000000005,20.954000000000004,281.24500000000006);f11(20.902000000000005,280.36800000000005,22.004000000000005,280.33500000000004,22.715000000000003,280.2850000000001);f11(23.519000000000002,280.22800000000007,23.438000000000002,278.2270000000001,25.221000000000004,278.18500000000006);
    f11(25.311000000000003,278.35200000000003,25.415000000000003,278.55000000000007,25.514000000000003,278.8040000000001);f2(15.757088945970105,282.640266763893);f12(0);f3(1,1);f5(0,0,10.484,-.3746172239189314,-.30760034464674374,0);f3(1,1);f12(0);f2(-15.757088945970105,-282.640266763893);f11(25.809,279.65400000000005,25.871000000000002,279.86500000000007,25.935000000000002,280.08700000000005);f11(25.935000000000002,280.36600000000004,25.899,280.55300000000005,25.812,280.6940000000001);
    f11(25.417,281.33700000000005,25.654,280.74800000000005,25.672,280.55300000000005);f11(25.689,280.37500000000006,25.642,280.27400000000006,25.567,280.39300000000003);f6();f7();f8();f9();f9();f9();ctx.restore();    
    return document.getElementById("planetCanvas").toDataURL();
}

var planet3 = function(){
    var ctx=document.getElementById("planetCanvas").getContext("2d");var funcNames=["clearRect","save","translate","scale","beginPath","arc","closePath","fill","stroke","restore","moveTo","bezierCurveTo","rotate"];for(var ii=0;ii<funcNames.length;ii++)window["f"+ii.toString()]=ctx[funcNames[ii]].bind(ctx);ctx.save();ctx.strokeStyle="transparent";f0(0,0,1E3,1E3);f1();f3(37.795,37.795);f1();f2(0,-270.542);f1();ctx.fillStyle="navy";f4();f5(13.229,283.771,13.229,0,6.283185307179586,true);f6();f7();f8();f9();
    f1();ctx.fillStyle="#c87137";f4();f10(14.155,289.724);f11(14.738,290.39,16.247,289.964,17.433,290.498);f11(17.741,290.636,17.866,291.306,18.044,291.421);f11(18.552,291.744,17.394,291.619,17.22,291.927);f11(15.76,294.537,15.047,294.232,15.189,294.538);f11(15.432,295.067,15.972,294.748,15.867,295.245);f11(15.651,296.259,14.907,296.999,13.228,296.999);f11(10.136,296.999,7.291,295.939,5.039,294.16);f11(4.658,293.78,4.389,293.496,4.304,293.161);f11(4.252,292.956,4.382,292.6,4.424,292.482);
    f11(4.489,292.298,4.6,292.507,4.816,292.349);f11(5.112,292.135,5.39,291.777,5.731,291.405);f11(6.236,290.854,5.895,290.058,6.083,289.749);f11(6.355,289.303,6.558,288.464,6.855,288.47);f11(8.522,288.504,7.721,289.068,8.661,288.817);f11(9.747,288.527,9.233,288.387,10.014,288.192);f11(12.747,287.506,13.573,289.057,14.155,289.722);f6();f7();f8();f9();f1();ctx.fillStyle="#c87137";f4();f10(16.803,294.18);f11(16.748,294.11,16.46,294.386,16.415,294.544);f11(16.369,294.7,16.275,295.433,16.439,295.544);
    f11(16.604,295.654,17.238,295.32,17.266,295.164);f11(17.296,295.007,16.929,294.788,16.886,294.651);f11(16.843,294.514,16.858,294.251,16.803,294.18);f6();f10(4.052,274.243);f2(13.232,283.776);f5(0,0,13.235,-2.337,-2.911,1);f2(-13.232,-283.776);f11(.086,282.058,.873,283.363,1.807,283.01);f11(2.477,282.724,3.001,282.643,3.426,282.677);f11(3.617,282.693,3.425,282.93,3.58,282.984);f11(3.748,283.042,4.261,282.919,4.398,283.001);f11(5.202,283.484,5.534,284.344,6.346,284.4);
    f11(6.967,284.442,7.55,283.881,8.302,283.527);f11(8.735,283.325,9.343,283.472,9.569,283.018);f11(9.814,282.527,9.643,281.392,9.098,279.993);f11(8.754,279.111,7.638,279.191,7.215,278.534);f11(7.177,278.476,7.002,277.599,7.342,277.2);f11(7.645,276.846,8.448,276.986,8.7,276.62);f11(8.988,276.2,8.977,276.018,8.945,275.756);f11(8.925,275.596,8.512,275.846,8.297,275.783);f11(7.877,275.661,7.738,275.82,7.455,275.884);f11(6.991,275.99,7.029,275.758,6.887,275.511);f11(6.307,274.509,4.845,274.287,4.052,274.243);
    f6();f10(17.982,271.425);f11(17.046,272.968,20.618,273.22,20.863,273.953);f11(21.113,274.696,20.002,275.379,18.853,276.385);f11(17.703,277.391,14.502,277.822,13.754,279.565);f11(13.007,281.31,14.909,279.737,14.83,280.221);f11(14.752,280.704,13.965,281.027,14.058,282.255);f11(14.151,283.483,15.28,284.823,15.812,284.617);f11(16.208,284.464,16.216,282.154,16.76,280.467);f11(16.853,280.177,17.292,280.038,17.405,279.812);f11(17.518,279.585,17.305,279.27,17.496,279.098);
    f11(18.986,277.761,22.367,278.964,23.623,277.928);f11(24.013,277.608,24.366,277.33,24.629,277.058);f2(13.208,283.796);f5(0,0,13.26,-.533,-1.202,1);f2(-13.208,-283.796);f6();f7();f8();f9();f1();ctx.fillStyle="#c87137";f4();f10(17.648,281.081);f11(17.594,281.221,17.903,281.391,18.065,281.411);f11(18.162,281.424,17.786,282.045,18.032,282.004);f11(18.199,281.977,19.017,281.312,19.052,281.239);f11(19.134,281.059,18.497,280.859,18.552,280.478);f11(18.608,280.097,17.992,280.301,17.854,280.425);
    f11(17.715,280.55,17.701,280.942,17.648,281.081);f6();f10(24.576,280.856);f11(24.125,280.933,24.061,283.988,23.811,284.388);f11(23.546,284.815,22.961,285.123,22.654,285.066);f11(22.347,285.008,21.406,285.768,21.496,286.205);f11(21.586,286.645,22.298,287.561,22.439,288.174);f11(22.58,288.787,21.52,289.847,21.629,290.538);f11(21.712,291.069,21.989,291.5,22.522,291.744);f11(22.683,291.818,22.829,292.341,22.977,292.212);f11(23.127,292.08,23.381,291.957,23.452,291.758);
    f11(23.768,290.876,24.394,289.968,24.804,289.645);f2(25.256,290.19);f5(0,0,.708,-2.264,-1.709,0);f2(-25.256,-290.19);f11(25.603,288.568,25.93,287.601,26.151,286.604);f11(26.175,286.054,26.169,285.526,26.139,285.164);f11(26.102,284.72,25.589,283.902,25.542,283.14);f11(25.487,282.253,24.992,281.099,24.672,280.882);f2(24.592,280.983);f5(0,0,.129,-.91,-1.702,1);f2(-24.592,-280.983);f6();f10(13.23,270.542);f11(12.654,270.546,12.076,270.573,11.506,270.654);f11(11.571,270.957,11.589,270.817,11.705,271.158);
    f11(11.823,271.508,11.252,271.758,11.845,271.837);f11(12.439,271.916,12.986,271.393,13.283,271.041);f11(13.576,270.695,13.581,270.924,13.801,270.554);f11(13.611,270.539,13.419,270.546,13.229,270.542);f6();f7();f8();f9();f9();f9();ctx.restore();
    return document.getElementById("planetCanvas").toDataURL();
}

var planet4 = function(){
    var ctx=document.getElementById("planetCanvas").getContext("2d");var funcNames=["clearRect","save","translate","scale","beginPath","arc","closePath","fill","stroke","restore","moveTo","bezierCurveTo","rotate"];for(var ii=0;ii<funcNames.length;ii++)window["f"+ii.toString()]=ctx[funcNames[ii]].bind(ctx);ctx.save();ctx.strokeStyle="transparent";f0(0,0,1E3,1E3);f1();f2(0,0);f3(37.795,37.795);f1();f2(0,-270.542);f1();ctx.fillStyle="#00aad4";f4();f5(13.229,283.771,13.229,0,6.283185307179586,true);f6();
    f7();f8();f9();f1();ctx.fillStyle="#008033";f4();f10(12.408,285.099);f11(12.184,285.086,12.027,285.743,11.972,287.933);f11(11.85,292.866,11.382,291.89,11.206,293.262);f11(10.831,296.168,11.931,293.637,13.229,297);f2(13.229,283.769);f5(0,0,13.231,1.57,1.187,1);f2(-13.229,-283.769);f11(18.883,294.728,16.714,294.438,16.765,293.119);f11(16.792,292.448,17.229,291.717,17.37,291.015);f11(17.434,290.697,17.318,290.214,17.282,290.045);f11(17.179,289.555,16.41,290.568,16.265,290.099);
    f11(16.09,289.536,16.354,288.327,16.129,287.789);f11(15.521,286.33,13.948,287.341,13.246,286.282);f11(12.923,285.794,12.632,285.111,12.408,285.099);f6();f10(11.075,285.018);f11(11.36,285.275,11.241,284.263,11.388,283.597);f11(11.478,283.193,11.956,282.84,11.884,282.409);f11(11.846,282.183,12.171,281.503,12.051,281.272);f11(11.811,280.808,10.465,280.361,9.951,280.108);f11(9.436,279.856,9.753,279.8,9.377,279.698);f11(8.437,279.443,7.595,280.549,7.28,280.352);f11(6.964,280.155,7.34,279.777,6.596,279.229);
    f11(6.12,278.879,6.13,277.936,5.615,277.194);f11(5.323,276.774,5.675,276.283,4.981,276.442);f11(4.45,276.564,4.196,275.982,3.848,276.679);f11(3.722,276.933,3.968,277.329,3.859,277.664);f11(3.452,278.915,2.397,280.931,2.169,282.369);f11(2.021,283.306,2.704,283.576,2.77,284.114);f11(2.957,285.638,3.712,286.121,4.43,286.683);f11(4.744,286.928,4.773,287.679,5.21,287.715);f11(6.1,287.787,6.187,287.895,6.122,287.455);f11(6.083,287.183,5.987,286.501,5.984,286.078);f11(5.982,285.727,6.884,285.301,6.901,284.628);
    f11(6.905,284.486,7.06,283.598,6.891,283.389);f11(6.682,283.132,6.296,283.744,6.069,283.445);f11(5.551,282.762,4.346,282.819,4.708,282.289);f11(5.383,281.301,5.931,282.104,6.96,282.176);f11(7.99,282.248,9.512,281.969,9.97,282.644);f11(10.38,283.401,10.79,284.76,11.075,285.018);f6();f10(9.647,286.36);f11(9.457,286.434,9.434,286.685,9.407,286.932);f11(9.389,287.095,9.207,287.257,9.274,287.43);f11(9.309,287.52,9.539,287.665,9.624,287.704);f11(9.719,287.749,9.792,287.618,9.894,287.589);
    f11(10.053,287.543,10.235,287.561,10.314,287.459);f11(10.469,287.253,10.258,287.297,10.14,287.251);f2(10.333,286.75);f5(0,0,.537,1.94,2.738,0);f2(-10.333,-286.75);f11(9.741,286.76,10.032,286.352,9.898,286.218);f11(9.764,286.084,9.836,286.284,9.647,286.358);f6();f10(22.67,276.839);f11(22.985,276.037,21.979,276.231,22.017,275.791);f11(22.099,274.841,18.544,276.466,18.307,276.773);f11(18.157,276.968,16.937,277.76,16.745,277.636);f11(15.86,277.062,14.432,280.02,13.618,279.312);
    f11(13.468,279.182,13.728,278.882,13.375,278.306);f11(13.077,277.82,12.166,277.09,11.989,276.583);f11(11.85,276.188,12.29,276.023,12.157,275.685);f11(11.917,275.083,11.663,274.785,11.51,274.641);f11(11.195,274.343,11.335,274.675,10.964,274.811);f11(10.426,275.008,9.387,275.084,9.113,274.662);f11(8.97,274.443,9.455,274.665,9.916,274.31);f11(10.154,274.126,10.103,273.772,10.312,273.492);f11(10.646,273.042,11.182,272.653,11.137,272.482);f11(10.805,271.219,11.141,271.752,11.5,271.559);
    f11(11.95,271.315,12.623,271.035,13.23,270.542);f11(18.551,270.542,23.14,273.684,25.239,278.215);f11(25.099,278.434,25.018,278.87,24.733,278.845);f11(24.365,278.815,23.767,278.279,23.416,278.279);f11(22.692,278.279,22.222,278.648,21.93,278.311);f11(21.772,278.128,21.985,277.992,22.068,277.793);f11(22.236,277.391,22.518,276.946,22.67,276.839);f6();f7();f8();f9();f1();ctx.fillStyle="#008033";f4();f10(17.951,293.029);f11(17.906,293.255,17.525,293.598,17.606,293.73);
    f11(17.686,293.862,18.033,293.696,18.246,293.815);f11(18.46,293.935,18.799,293.113,18.696,292.88);f11(18.594,292.647,18.516,292.445,18.367,292.486);f11(18.254,292.518,17.997,292.801,17.951,293.029);f6();f10(26.341,285.528);f11(26.091,285.709,25.837,285.667,25.462,285.969);f11(24.974,286.363,24.35,287.111,23.969,287.351);f11(23.493,287.648,23.413,287.375,23.139,287.7);f11(22.842,288.051,23.119,288.09,23.22,288.414);f11(23.327,288.76,23.265,289.39,23.153,289.645);
    f11(23.085,289.796,22.816,289.893,22.772,290.032);f11(22.452,291.049,22.924,291.789,23.198,292.467);f2(13.206,283.761);f5(0,0,13.253,.716,.133,1);f2(-13.206,-283.761);f6();f10(23.339,286.456);f11(23.787,286.499,23.735,286.273,23.732,285.753);f11(23.729,285.275,24.044,284.82,23.991,284.521);f11(23.961,284.354,23.816,284.279,23.747,284.06);f11(23.592,283.552,23.316,282.997,22.927,282.658);f11(22.857,282.598,22.866,282.433,22.784,282.396);f11(22.04,282.066,20.857,283.307,20.039,283.091);
    f11(19.552,282.962,19.012,282.661,18.767,282.237);f11(18.69,282.104,19.011,281.947,18.993,281.8);f11(18.971,281.628,18.606,281.48,18.418,281.537);f11(18.262,281.583,18.133,281.957,17.935,282.174);f11(17.787,282.338,17.555,282.338,17.498,282.469);f11(17.284,282.961,17.771,283.551,17.928,284.092);f11(17.981,284.275,17.675,284.392,17.724,284.579);f11(17.943,285.433,18.67,286.163,19.45,286.821);f11(19.666,287.003,19.713,287.763,19.964,287.812);f11(21.124,288.037,22.476,286.374,23.338,286.456);f6();
    f10(4.237,291.947);f11(4.019,291.96,3.751,292.016,3.667,292.017);f11(3.421,292.022,3.408,292.307,3.245,292.45);f2(13.246,283.745);f5(0,0,13.259,2.425,2.217,1);f2(-13.246,-283.745);f11(5.491,294.039,5.231,293.615,5.042,293.167);f11(4.891,292.811,4.987,292.686,4.681,292.361);f11(4.608,292.281,4.637,291.984,4.43,291.95);f2(4.314,292.869);f5(0,0,.926,-1.445,-1.654,1);f2(-4.314,-292.869);f6();f7();f8();f9();f9();f9();ctx.restore();
    return document.getElementById("planetCanvas").toDataURL();
}

var ring1a = function(){
    //Add jsvg
}

var ring1b = function(){
    //Add jsvg
}

//WebGL detection
try {
    var canvas = document.createElement('canvas');
    supportsWebGL = !! (window.WebGLRenderingContext && (canvas.getContext('webgl') || canvas.getContext('experimental-webgl')));
} catch ( e ) {
    supportsWebGL = false;
}
if (supportsWebGL) {
    init();
    render();
} else {
    document.getElementById("webgl-unsupported").innerHTML = "Your graphics card does not seem to support WebGL. <br/><br/> Find out how to get it here: <a href=\"https://get.webgl.org/\" target=\"_blank\">https://get.webgl.org/</a>";
}